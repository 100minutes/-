/*
PC_B_InteractiveSorting
大文字のラベルが付いた重さが異なるN個のボールに対し、2個を比べられる質問をQ回する迄にボールを軽い順に並べ文字列で出力。
*/
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#pragma GCC optimize("O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define rep(i,N) for(int i=0;i<(int)N;i++)
#define swap(a,b) (a+=b,b=a-b,a-=b)
char order[27],str[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0";
int count=0,id=0,mass[26][26];
struct pair{int first,second;}*lighter;
static inline int IN(void)
{
  int x=0,f=0,c=getchar();while(c<48||c>57){f^=c==45,c=getchar();}
  while(c>47&&c<58){x=x*10+c-48,c=getchar();}return f?-x:x;
}
extern inline int Abs(int x){return x<0?-x:x;}
static inline int Ascptr(const void *a,const void *b){return (*(const struct pair**)a)->first-(*(const struct pair**)b)->first;}
static inline int Balance(const char x,const char y)
{
  int a=x-65,b=y-65;
  if(mass[a][b]==-1)
  {
    printf("? %c %c\n",x,y);fflush(stdout);char c;if(!scanf(" %c",&c))exit(EXIT_FAILURE);
    if(c=='>'){mass[a][b]=1;mass[b][a]=0;return 1;}else{mass[a][b]=0;mass[b][a]=1;return 0;}
  }
  else return mass[a][b];
}
static inline void Insert(const char c)
{
  int l=0,r=count;
  while(l<r){int mid=(l+r)/2;if(Balance(c,order[mid]))l=mid+1;else r=mid;}
  count++;if(Balance(c,order[r])){r++;}
  rep(i,count-r){order[count-i]=order[count-1-i];}order[r]=c;
}
static inline int Relate(const char* a){rep(i,id){if(a[lighter[i].first]>=a[lighter[i].second])return 0;}return 1;}
static inline void Reverse(char* nums,int start,const int sz){int i=start,j=sz-1;while(i<j){swap(nums[i],nums[j]);i++;j--;}}
static inline int NextPerm(char* array,const int sz)
{
  int i=sz-2;while(i>=0&&array[i+1]<=array[i]){i--;}
  if(i>=0)
  {
    int j=sz-1;while(j>=0&&array[j]<=array[i]){j--;}
    swap(array[i],array[j]);Reverse(array,i+1,sz);return 1;
  }
  return 0;
}
char array[]="0123456789\n";
static inline int Perm(int x,int N)
{
  int temp=0;//48(num),65(capital),97(lowercase)
  if(x==0){rep(i,N){putchar(array[N-1-i]);}return puts(""),0;}
  rep(i,x)
  {
    temp=array[i];
    //for(int j=i+1;j<x;j++)array[j-1]=array[j];
    rep(j,x-i-1)array[i+j]=array[i+j+1];
    array[x-1]=temp;//shift
    Perm(x-1,N);
    //for(int j=x-1;j>i;j--)array[j]=array[j-1];
    rep(j,x-i-1)array[x-j-1]=array[x-j-2];
    array[i]=temp;//shift back again
  }
  return 1;
}
int main(void)
{
  int N=IN();IN();str[N]=order[N]=0;memset(mass,-1,sizeof(mass));//array[N]=0;Perm(N,N);
  if(N==26){order[0]=str[0];rep(i,N-1){Insert(str[i+1]);}printf("! %s\n",order);return fflush(stdout),0;}
  else
  {
    lighter=(struct pair*)malloc(7*sizeof(struct pair));if(lighter==NULL){exit(EXIT_FAILURE);}
    while(1)
    {
      int mini=0x7fffffff,prob[5][5]={{0}},q=0,x=0,y=0;
      do{if(Relate(str)){q++;rep(i,N)rep(j,N)if(str[i]<str[j])prob[i][j]++;}}while(NextPerm(str,N));
      if(q==1)break;
      rep(i,N)rep(j,N){int entropy=abs(2*prob[i][j]-q);if(mini>entropy){mini=entropy;x=i;y=j;}}
      if(!Balance(x+65,y+65))lighter[id].first=x,lighter[id++].second=y;
      else lighter[id].first=y,lighter[id++].second=x;
      Reverse(str,0,N);
    }
    struct pair** ref=(struct pair**)malloc(N*sizeof(struct pair*));
    if(ref==NULL){exit(EXIT_FAILURE);}Reverse(str,0,N);
    do
    {
      if(Relate(str))
      {
        rep(i,N)
        {
          lighter[i].first=str[i]-65,lighter[i].second=i;
          ref[i]=(struct pair*)malloc(1*sizeof(struct pair));
          if(ref[i]==NULL){exit(EXIT_FAILURE);}
          ref[i]=&lighter[i];
        }
        qsort(ref,N,sizeof(*ref),Ascptr);
        rep(i,N){order[i]=ref[i]->second+65;}printf("! %s\n",order);
        fflush(stdout);free(lighter);return free(ref),0;
      }
    }while(NextPerm(str,N));
  }
}